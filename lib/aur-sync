#!/bin/bash
# aur-sync - download and build AUR packages automatically
set -o errexit -o pipefail
shopt -s nullglob
shopt -s extglob
readonly argv0=sync
readonly XDG_CACHE_HOME=${XDG_CACHE_HOME:-$HOME/.cache}
readonly AURDEST=${AURDEST:-$XDG_CACHE_HOME/aurutils/$argv0}
readonly AURDEST_SNAPSHOT=${AURDEST_SNAPSHOT:-$XDG_CACHE_HOME/aurutils/snapshot}
readonly PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'

# default arguments
build_args=()
fetch_args=()
makechrootpkg_args=(-cu)
makechrootpkg_makepkg_args=()
makepkg_args=(-cs)

# default options (enabled)
build=1 chkver_depth=2 download=1 view=1 provides=1

# default options (disabled)
chroot=0 list=0 rotate=0 snapshot=0 update=0 repo_list=0 keep_deps=0

lib32() {
    awk -v arch="$(uname -m)" '{
        if(arch == "i686") {
            gsub(/^lib32-/,"")
            gsub(/^gcc-multilib$/,"")
        }; print
    }'
}

conf_file_repo() {
    awk -F'= ' '
        $1 ~ /^\[.+\]$/ {
            repo = substr($1, 2, length($1)-2)
        }
        $1 ~ /^Server/ && $2 ~ /^file:/ {
            printf("%s\n%s\n", repo, $2)
        }'
}

db_namever() {
    awk '/%NAME%/ {
        getline
        printf("%s\t", $1)
    }
    /%VERSION%/ {
        getline
        printf("%s\n", $1)
    }'
}

db_fill_empty() {
    awk '{print} END {
        if (!NR)
            printf("%s\t%s\n", "(none)", "(none)")
    }'
}

# files: $1 pkgname\tpkgbase $2 pkgname (order by $2)
select_pkgbase() {
    awk 'NR == FNR {
        map[$1] = $2
        next
    } {
        if ($1 in map) {
            base = map[$1]

            # only print pkgbase on first occurence
            if (base in seen) {
                next
            } else {
                print base
                seen[base]
            }
        }
    }' "$@"
}

# fields: $1 pkgname, $2 depends[<>=]
tr_ver() {
    awk -F'[<>=]' '{print $1}'
}

complement() {
    # empty set should not return 1
    grep -Fxvf "$@" || return $(($?-1))
}

trap_exit() {
    if [[ ! -o xtrace ]]; then
        rm -rf "$tmp" "$tmp_view"
    fi
}

viewer() {
    if type -P >/dev/null vifm; then
        vifm - '+view!'
    else
        command -- ${PAGER:-less -K}
    fi
}

usage() {
    plain "usage: $argv0 [-ABcDfglLprstTu] [long options] [--] pkgname... [-]"
    exit 1
}

source /usr/share/makepkg/util/util.sh
source /usr/share/makepkg/util/message.sh
source /usr/share/makepkg/util/parseopts.sh

if [[ -t 2 && ! -o xtrace ]]; then
    colorize
fi

opt_short='d:D:AcfgklLpstTu'
opt_long=('bind:' 'bind-rw:' 'database:' 'directory:' 'ignore:' 'repo:' 'root:'
          'makepkg-conf:' 'pacman-conf:' 'allan' 'chroot' 'continue'
          'force' 'ignore-arch' 'ignorearch' 'log' 'no-confirm' 'no-confirm'
          'no-ver' 'nover' 'nover-shallow' 'noprovides' 'no-provides'
          'no-ver-shallow' 'no-view' 'noview' 'print' 'rm-deps'
          'keep' 'sign' 'temp' 'tar' 'upgrades' 'list' 'git'
          'repo-list' 'rebuild' 'rebuildtree' 'rebuild-tree')

if ! parseopts "$opt_short" "${opt_long[@]}" -- "$@"; then
    usage
fi
set -- "${OPTRET[@]}"

unset pkg pkg_i root repo
while true; do
    case "$1" in
        -d|--repo|--database) shift; repo=$1 ;;
        -D|--directory)       shift; build_args+=(-D "$1") ;;
        --bind)               shift; makechrootpkg_args+=(-D "$1") ;;
        --bind-rw)            shift; makechrootpkg_args+=(-d "$1") ;;
        --ignore)             shift; IFS=, read -a pkg -r <<< "$1"
                              pkg_i+=("${pkg[@]}") ;;
        --makepkg-conf)       shift; build_args+=(-M "$1") ;;
        --pacman-conf)        shift; build_args+=(-C "$1") ;;
        --root)               shift; root=$1 ;;
        -A|--ignore?(-)arch)  makepkg_args+=(-A)
                              makechrootpkg_makepkg_args+=(-A) ;;
        -c|--chroot)          chroot=1; build_args+=(-c) ;;
        -f|--force)           build_args+=(-f) ;;
        -g|--git)             snapshot=0 ;;
        -l|--list)            list=1 ;;
        -L|--log)             makepkg_args+=(-L) ;;
        -p|--print)           build=0 ;;
        -k|--keep)            keep_deps=1 ;;
        -t|--tar)             snapshot=1 ;;
        -s|--sign)            build_args+=(-sv) ;;
        -T|--temp)            makechrootpkg_args+=(-T) ;;
        -u|--upgrades)        update=1 ;;
        --allan)              rotate=1 ;;
        --continue)           download=0 ;;
        --no?(-)confirm)      makepkg_args+=(--noconfirm) ;;
        --no?(-)ver)          chkver_depth=0 ;;
        --no?(-)ver-shallow)  chkver_depth=1 ;;
        --no?(-)view)         view=0 ;;
        --no?(-)provides)     provides=0 ;;
        --repo-list)          repo_list=1 ;;
        --rebuild)            build_args+=(-f)
                              chkver_depth=1 ;;
        --rebuild?(-)tree)    build_args+=(-f)
                              chkver_depth=0 ;;
        --)                   shift; break ;;
    esac
    shift
done
unset opt_short opt_long OPTRET

tmp=$(mktemp -dt "$argv0".XXXXXXXX)
tmp_view=$(mktemp -dt view.XXXXXXXX)
trap 'trap_exit' EXIT

if ((rotate)); then
    if { hash rot13 && target=$(aur pkglist | shuf -n 1); } 2>/dev/null; then
        exec bash -c "{ aur \"$argv0\" -c \"$target\" && repo-elephant | rot13; } 2>&1 | rot13"
    else
        echo '?'; exit 16 # EBUSY
    fi
fi

if ((repo_list)); then
    pacconf | conf_file_repo
    exit
fi

if ((!keep_deps)); then
    makepkg_args+=(-r)
fi

if [[ ${repo=$AUR_REPO} ]]; then
    server=$(pacconf --single --repo="$repo" Server)
    server=${server#*://}
else
    mapfile -t conf < <(pacconf | conf_file_repo)

    case ${#conf[@]} in
        2) repo=${conf[0]}
           root=${conf[1]#*://} ;;
        0) error "$argv0: no file:// repository found"
           exit 2 ;;
        *) error "$argv0: repository choice is ambiguous (use --repo to specify)"
           printf '%s\n' "${conf[@]}" | paste - - | column -t >&2
           exit 2 ;;
    esac
fi

if ! (($# + update + list)); then
    error "$argv0: no targets specified"
    exit 1
fi

msg "Using [$repo] repository"
root=$(realpath -- "${root-$server}")

if ! [[ -w $root/$repo.db && -r $root/$repo.db ]]; then
    error "$argv0: $repo: permission denied (read-write)"
    exit 13
fi

if ((snapshot)); then
    aur_workdir=$AURDEST_SNAPSHOT
    fetch_args=(-L "$tmp_view" -t)
else
    aur_workdir=$AURDEST
    fetch_args=(-L "$tmp_view" -g)
fi

mkdir -p     "$aur_workdir"
chmod -c 700 "$aur_workdir"

cd_safe "$tmp"

# parse repo contents
bsdcat "$root/$repo".db | db_namever | db_fill_empty >db_info

if ((list)); then
    while read -r pkgname pkgver; do
        printf '%q\t%s\t%s\n' "$repo" "$pkgname" "$pkgver"
    done <db_info

    exit
fi

{ if (($#)); then
      printf '%s\n' "$@"
  fi

  if ((update)); then
      aur vercmp <db_info | cut -d: -f1
  fi
} >argv

if [[ -s argv ]]; then
    # $1 pkgname $2 depends $3 pkgbase $4 pkgver
    aur depends <argv >depends
else
    plain "there is nothing to do"
    exit
fi

# $1 pkgname $2 pkgbase $3 pkgver
cut -f2 --complement depends | sort -u >pkginfo

{ if ((${#pkg_i[@]})); then
      printf >&2 'warning: ignoring %s package\n' "${pkg_i[@]}"
      printf '%s\n' "${pkg_i[@]}"
  fi

  # packages with equal or newer versions are taken as complement
  # for the queue. if chkver_shallow is enabled, packages on the
  # command-line are excluded from this complement
  if ((chkver_depth)); then
      case $chkver_depth in
          1) chkver_i() { complement argv; } ;;
          2) chkver_i() { tee; } ;;
      esac

      cut -f1,3 pkginfo | aur vercmp -p db_info -c | chkver_i
  fi

  if ((provides)); then
      # note: this uses pacman's copy of the repo (as used by makepkg -s)
      cut -f1 pkginfo | complement argv | aur repo-filter -d "$repo"
  fi
} >filter

# pkgname queue (AUR + repos)
cut -f1,2 depends | tr_ver | tsort | tac | lib32 | complement filter >queue_0

# pkgbase queue (AUR)
cut -f1,2 pkginfo | select_pkgbase - queue_0 >queue

if [[ -s queue ]]; then
    cd_safe "$aur_workdir"
else
    plain "there is nothing to do"
    exit
fi

if ((download)); then
    msg "Retrieving package files"
    
    aur jobs -Xj +3 --nice 10 --halt soon,fail=1 \
        aur fetch "${fetch_args[@]}" :::: "$tmp"/queue
fi

# link build files in the queue (absolute links)
aur jobs -X ln -s "$(pwd -P)"/{} "$tmp_view" :::: "$tmp"/queue

if ((view)); then
    cd_safe "$tmp_view"

    if [[ -v AUR_PAGER ]]; then
        command -- $AUR_PAGER
    else
        printf '%s\n' *.patch *.diff | cat - "$tmp"/queue \
            | xargs -I{} find -L "$tmp_view"/{} -maxdepth 1 | viewer
    fi

    # XXX: move/save this call?
    cd_safe -
fi

if ((build)); then
    build_args+=(-d "$repo" -r "$root" -a "$tmp"/queue)

    # check if AUR dependency graph is valid
    aur graph "$tmp_view"/*/.SRCINFO >/dev/null

    # check repo dependencies (FIXME: --sysroot for containers)
    cut -f2 "$tmp"/depends | aur repo-filter --all 2>/dev/null >"$tmp"/found_repo

    # XXX: use separate files instead of cut(1)
    cut -f1 "$tmp"/depends | cat "$tmp"/found_repo - \
        | complement - <(cut -f2 "$tmp"/depends) >"$tmp"/foreign

    # guess candidates for unknown packages and present them to the user
    mapfile -t undeps < <(cat "$tmp"/foreign | sort -u | pacman -T -)

    # avoid nested while loops in formatting text
    if [[ ${undeps[*]} ]]; then
        error "$argv0: virtual or missing packages"

        for i in "${undeps[@]}"; do
            origin=$(grep -w -m1 "$i" "$tmp"/depends | cut -f1)
            msg2 "$i ($origin)"
        done

        msg "Possible providers:"
        aur pkglist >"$tmp"/pkglist

        # agrep does not support -f, has differing results with OR
        for i in "${undeps[@]}"; do
            agrep --show-cost --best-match "^$i" "$tmp"/pkglist | while
                IFS=: read -r cost pkg
            do
                msg2 "$pkg [$RED$cost$ALL_OFF$BOLD errors]"
            done
        done

        exit 2
    fi

    if ((chroot)); then
        aur build "${build_args[@]}" -- "${makechrootpkg_args[@]}" \
            -- "${makechrootpkg_makepkg_args[@]}"
    else
        aur build "${build_args[@]}" -- "${makepkg_args[@]}"
    fi
else
    xargs -a "$tmp"/queue -I{} printf '%s\n' "$(pwd -P)"/{}
fi

# vim: set et sw=4 sts=4 ft=sh:
